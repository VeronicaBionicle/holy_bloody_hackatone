#include "Arduino.h"
#include "TimerOne.h" //библиотека для работы с прерываниями по таймеру
#include "iarduino_RTC.h" //библиотека для работы с RTC модулем

// имена портов
// порты светофоров
#define GREENLIGHT 10
#define REDLIGHT 11
// порты фонарей 
#define L_1 3
#define L_2 4
//порты для датчиков освещенности
#define CROSS_1 A2  //это два датчика для светофора
#define CROSS_2 A3
#define CROSS_3 A4 //это два датчика для светофора
#define CROSS_4 A5

#define photoPin A8 // сенсор и понижающий резистор 10 кОм подключены к a8
//скорость изменения цвета  
#define FADESPEED 20     //чем выше число, тем медленнее будет переход

iarduino_RTC time(RTC_DS3231); //подключение RTC модуля     

char incomingByte;  //входящие с bluetooth-модуля данные 
long incomingInt;

volatile int x = 0;

volatile boolean flag_cross1 = false;
volatile boolean flag_cross2 = false;
int i;
//время вкл, выкл света
unsigned short int light_on_hour = 15;
unsigned short int light_off_hour = 20;
unsigned short int light_on_minute = 30;
unsigned short int light_off_minute = 59;

volatile unsigned short int enabled_lamp[2] = {1,1};  //маска для выбранных вручную фонарей

volatile boolean traffic_state = false;
volatile int red_time = 5;
volatile int green_time = 10;
volatile int traffic_time = 0;

volatile int last_brightness = 0;
int br1, br2, br3, br4;

void Light(int last, int current){
  if (last > current) {
  for (i=last; i>=current; i--){
    analogWrite(L_1, i*enabled_lamp[0]);
    analogWrite(L_2, i*enabled_lamp[1]);
    delay(FADESPEED);
    
  };
    
    } else {
      for (i=last; i<=current; i++){
    analogWrite(L_1, i*enabled_lamp[0]);
    analogWrite(L_2, i*enabled_lamp[1]);
    delay(FADESPEED);
  };
  };
if (x==1) {delay(5000); x=0;};
};

int GetBrightness(){
  int brightness;
    switch(analogRead(photoPin)){
       case 0 ... 150:
         brightness = 0;
         break;
       case 151 ... 300:
           brightness = 64;
            break;
       case 301 ... 500:
            brightness = 153;
            break;
       case 501 ... 1023:
           brightness = 255;
            break;         
        default:
            break;
    };
    return brightness;
}

void Traffic_light(){

  

  if (!traffic_state){
    digitalWrite(REDLIGHT, !traffic_state);
    digitalWrite(GREENLIGHT, traffic_state);
    traffic_time++;
    if (traffic_time==red_time){
      traffic_state = !traffic_state;
      digitalWrite(REDLIGHT, !traffic_state);
      digitalWrite(GREENLIGHT, traffic_state);
      traffic_time = 0;
    };
  };

  if (traffic_state){
    digitalWrite(REDLIGHT, !traffic_state);
    digitalWrite(GREENLIGHT, traffic_state);
    traffic_time++;
    if (traffic_time==green_time){
      traffic_state = !traffic_state;
      digitalWrite(REDLIGHT, !traffic_state);
      digitalWrite(GREENLIGHT, traffic_state);
      traffic_time = 0;
    };
  };
};


void setup() {
//инициализация портов
  pinMode(GREENLIGHT, OUTPUT);
  pinMode(REDLIGHT, OUTPUT);
  pinMode(L_1, OUTPUT);
  pinMode(L_2, OUTPUT);
  pinMode(CROSS_1, INPUT);
   pinMode(CROSS_2, INPUT);
    pinMode(CROSS_3, INPUT);
     pinMode(CROSS_4, INPUT);
  Timer1.initialize();  //опрос датчика каждую секунду
 Serial.begin(9600);
  time.begin(); //запуск RTC модуля
    Timer1.attachInterrupt(Traffic_light);
              }
  
void loop() {
    
   last_brightness = GetBrightness();

  if (analogRead(CROSS_1)>350 or analogRead(CROSS_2)>300) {if (x==0){flag_cross1 = 1; x++;};} else flag_cross1 = 0;
  if (analogRead(CROSS_3)>350 or analogRead(CROSS_4)>400) {if (x==0){flag_cross2 = 1; x++;};} else flag_cross2 = 0;
  
noInterrupts();
enabled_lamp[0] = flag_cross1;
enabled_lamp[1] = flag_cross2;
interrupts();

 
   if (time.Hours >= light_on_hour && time.Hours < light_off_hour) {
    if (time.minutes >= light_on_minute) Light(last_brightness, GetBrightness()); else Light(last_brightness, 0);}
    else {
    if (time.minutes >= light_off_minute) Light(last_brightness, 0);
    else Light(last_brightness, GetBrightness());
    };

            }
            
